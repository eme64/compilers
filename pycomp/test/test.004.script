struct ABC2 {
   var i32 x;
   var i32 y;
};

var u8 num1 = 5;
var u16 num2 = 1000;
var u32 num3 = 1000000;
var u64 num4 = 1000000000000;
var i32 num5 = -1000;
var u64 num6 = -1;
//var u64 num6_ = num6;

var i8  num001 = 0;
var i16 num002 = 0;
var i32 num003 = 0;
var i64 num004 = 0;
var u64 num005 = 0;

var u64 num006 = (1+2) * (6-3) / 3; // immediate calc
//var u64 num007 = (1+2) * (3-6) / 0; // immediate calc:  error
var u64 num008 = (1+2) * (3-6) / 3; // immediate calc:  warning

var double num7 = 1010101.1010101;
var float num8 = 1.1;
var float num9 = 1111;
//var u64 num10 = 111.111;

var u64 var000 = 100;
var i64 var001 = 100;
var float var002 = 200;
var double var003 = 0.5;

var u8 u8_five = 5;
var i32 i32_five = -5;
var u64 u64_asdf = 100000;

// pass-through currently not implemented
//var u64 asdf = var u64 asdfasdf = 100;

function void func1() {
	num6 = 2;
	num7 = 2.345;
	// TODO: try other combinations !!!
	num1 = 1;
	num2 = 2;
	num3 = 4;
	num4 = -100;
	num5 = 10;
	num6 = -2;
	num8 = 2.3456;
	num9 = 222222;
};

function void func2() {
	num1 = num1 + num1;
	num2 = num2 + num2;
	num3 = num3 + num3;
	num4 = num4 + num4;
	num5 = num5 + num5;
	num6 = num6 + num6;
	num7 = num7 + num7;
	num8 = num8 + num8;
	num9 = num9 + num9;
};

function void func3() {
	num1 = num1 + num1 + num1;
	num2 = num2 + 2;
	num2 = 2 + num2 + 2;
	num3 = num1;

	num4 = 5 + (-10);

	num001 = -1;
	num005 = num001;
	num6 = num005;

	num9 = (1.1+2.2) * (1.1-2.2) / (1.0 - 0.5);
	num7 = 5 * 6;
	num7 = num7 + 0.5;
	num7 = num7 - 0.5;
	num7 = num7 * 0.5;
	num7 = num7 / 0.5;
	
	
	num1 = num1 + u8_five;
	num1 = num1 - u8_five;
	num1 = num1 * u8_five;
	num1 = num1 / u8_five;
	
	num5 = -6;
	num5 = num5 + i32_five;
	num5 = num5 - i32_five;
	num5 = num5 * i32_five;
	num5 = num5 / i32_five;
	
	num6 = 10000000;
	num6 = num6 + u64_asdf;
	num6 = num6 - u64_asdf;
	num6 = num6 * u64_asdf;
	num6 = num6 / u64_asdf;
};
function void func_cast_0() {
	var000 = var000;
	var001 = var000;
	//var002 = var000;
	//var003 = var000;
};
function void func_cast_1() {
	var000 = var001;
	var001 = var001;
	var002 = var001;
	var003 = var001;
};
function void func_cast_2() {
	var000 = var002;
	var001 = var002;
	var002 = var002;
	var003 = var002;
};
function void func_cast_3() {
	var000 = var003;
	var001 = var003;
	var002 = var003;
	var003 = var003;
};


function void test_local() {
	var i32 l0 = var i32 l2 = 200;
	var i32 l1;
	l1 = 200;
	num1 = l1;
	num2 = l1;
	num3 = l1;
	num4 = l1;
	num5 = l1;
	num6 = l1;
	
	{
		var i32 l001 = 1;
		l001 = l001 + 2;
	};
	{
		var i32 l001 = 1;
		l001 = l001 + 2;
		l1 = l001;
	};
	num6 = l1;
};


var i32 branch_1_cond;
var i32 branch_1_res;
function void branch_1() {
	var i32 loc1 = 1;
	if(branch_1_cond + (var i32 loc2 = 3)) {
		branch_1_res = loc2;
		var i32 loc3 = 3;
	} else {
		branch_1_res = loc2 + 5;
	};
	if(branch_1_cond) {
		branch_1_res = branch_1_res + 1;
	};
	if(branch_1_cond) {
		branch_1_res = branch_1_res + 1;
	} elif (1) {
		branch_1_res = branch_1_res + 1;
	};
	
};

var i32 args_1_res;
function void args_1(var i32 a1, var i32 a2) {
	args_1_res = a1*2+a2;
};

var i32 args_001_res;
function void args_001(
	var i32 a1, 
	var i32 a2,
	var i32 a3,
	var i32 a4,
	var i32 a5,
	var i32 a6,
	var i32 a7,
	var i32 a8,
	var i32 a9,
	var i32 a10
	){
	args_001_res = 0
		+ 1 * a1
		+ 2 * a2
		+ 3 * a3
		+ 4 * a4
		+ 5 * a5
		+ 6 * a6
		+ 7 * a7
		+ 8 * a8
		+ 9 * a9
		+ 10* a10;
};

var float args_002_res;
function void args_002(
	var float a1, 
	var float a2,
	var float a3,
	var float a4,
	var float a5,
	var float a6,
	var float a7,
	var float a8,
	var float a9,
	var float a10
	){
	args_002_res = 0.0
		+ 1.0 * a1
		+ 2.0 * a2
		+ 3.0 * a3
		+ 4.0 * a4
		+ 5.0 * a5
		+ 6.0 * a6
		+ 7.0 * a7
		+ 8.0 * a8
		+ 9.0 * a9
		+ 10.0* a10;
};

function void args_003(
	var float a1, 
	var i32 a2,
	var float a3,
	var i32 a4,
	var float a5,
	var i32 a6,
	var float a7,
	var i32 a8,
	var float a9,
	var i32 a10,
	var float a11,
	var i32 a12,
	var float a13,
	var i32 a14,
	var float a15,
	var i32 a16,
	var float a17,
	var i32 a18,
	var float a19,
	var i32 a20
	){};


function i32 return_1(var i32 a1,var i32 a2){
	return (2*a1+3*a2);
};
var i32 return_2_err = 0;
function i32 return_2(var i32 a1,var i32 a2){
	if(a1){
		return (1+a2);
		return_2_err = 1;
	} else {
		return (2+a2);
		return_2_err = 1;
	};
	return_2_err = 1;
};

struct ASDF {
	var i32 x;
	var i32 y;
};
function i32 array_r(var (*i32) a, var i32 i) {
	return (*(1+(i+a)-1));
	return (*(a+i+1-1));
};

function i32 ptr_diff(var (*i32) a, var (*i32) b) {
	var i64 aa = a - b;
	return aa;
};
